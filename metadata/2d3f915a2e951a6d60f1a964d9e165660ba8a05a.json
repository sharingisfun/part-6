{"title":"Large-Scale C++ Software Design.pdf Gooner","uid":11712204,"size":46297324,"categoryP":"other","categoryS":"e_books","magnet":"?xt=urn:btih:2d3f915a2e951a6d60f1a964d9e165660ba8a05a&amp;dn=Large-Scale+C%2B%2B+Software+Design.pdf+Gooner&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969","seeders":6,"leechers":3,"uploader":"GoonerTPB","files":1,"time":1424382180,"description":"Publisher: Addison Wesley; 1 edition (10 July 1996)\nLanguage: English\nISBN-10: 0201633620\nISBN-13: 978-0201633627\n\nDeveloping a large-scale software system in C++ requires more than just a sound understanding of the logical design issues covered in most books on C++ programming. To be successful, you will also need a grasp of physical design concepts that, while closely tied to the technical aspects of development, include a dimension with which even expert software developers may have little or no experience. This is the definitive book for all C++ software professionals involved in large development efforts such as databases, operating systems, compilers, and frameworks. It is the first C++ book that actually demonstrates how to design large systems, and one of the few books on object-oriented design specifically geared to practical aspects of the C++ programming language. In this book, Lakos explains the process of decomposing large systems into physical (not inheritance) hierarchies of smaller, more manageable components. Such systems with their acyclic physical dependencies are fundamentally easier and more economical to maintain, test, and reuse than tightly interdependent systems.In addition to explaining the motivation for following good physical as well as logical design practices, Lakos provides you with a catalog of specific techniques designed to eliminate cyclic, compile-time, and link-time (physical) dependencies. He then extends these concepts from large to very large systems. The book concludes with a comprehensive top-down approach to the logical design of individual components. Appendices include a valuable design pattern &quot;Protocol Hierarchy&quot; designed to avoid fat interfaces while minimizing physical dependencies; the details of implementing an ANSI C compatible C++ procedural interface; and a complete specification for a suite of UNIX-like tools to extract and analyze physical dependencies. Practical design rules, guidelines, and principles are also collected in an appendix and indexed for quick reference. 0201633620B04062001","torrent":{"xt":"urn:btih:2d3f915a2e951a6d60f1a964d9e165660ba8a05a","amp;dn":"Large-Scale+C%2B%2B+Software+Design.pdf+Gooner","amp;tr":["udp%3A%2F%2Ftracker.openbittorrent.com%3A80","udp%3A%2F%2Fopen.demonii.com%3A1337","udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969","udp%3A%2F%2Fexodus.desync.com%3A6969"],"infoHash":"2d3f915a2e951a6d60f1a964d9e165660ba8a05a","infoHashBuffer":{"type":"Buffer","data":[45,63,145,90,46,149,26,109,96,241,169,100,217,225,101,102,11,168,160,90]},"announce":[],"urlList":[]}}